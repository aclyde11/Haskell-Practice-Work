-- Austin Clyde Lecture 13
-- 13.4*
instance Foldable [] where
--foldMap :: Monoid m => (a -> m) -> [a] -> m
  foldMap _ []     = mempty
  foldMap f (x:xs) = f x <> foldMap f xs 

*Main> foldMap (Sum) []
Sum {getSum = 0}
*Main> foldMap Sum [1, 2, 3]
Sum {getSum = 6}

instance Foldable Maybe where
  foldMap _ Nothing  = mempty
  foldMap f (Just x) = f x

*Main> foldMap Product (Just 3)
Product {getProduct = 3}
*Main> foldMap Product (Nothing)
Product {getProduct = 1}

instance Foldable (Either a) where
  foldMap _ (Left _)  =  mempty
  foldMap f (Right x) = f x

*Main> foldMap (++ "aa") (Left 3)
""
*Main> foldMap (++ "aa") (Right "hi")
"hiaa"

instance Foldable ((,) a) where
  foldMap f (_, b) = f b

*Main> foldMap (++ "!") (3, "hey")
"hey!"

-- 13.5*
newtype FstPair a b = FstPair { getFstPair :: (b, a) }
instance Foldable (FstPair a) where
  foldMap f (FstPair (b, _)) = f b

-- tests
*Main> foldMap Sum (FstPair (0,1))
Sum {getSum = 0}